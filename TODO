☐	Maybe there is an implementation of multi-dimensional array where one can specify that along one axis subArrays have non-uniform size?! https://juliaarrays.github.io/ArraysOfArrays.jl/stable/ https://github.com/JuliaArrays/BlockArrays.jl
☐	different ontologies for different frames
☐	Add the use of an unbalanced test set, and make ConfusionMatrix compute the average recall
☐	gammas contain a lot of redundance: perhaps use PooledArrays.jl, IndirectArrays.jl, CategoricalArrays.jl for saving space, both for saving to file AND for learing (might be beneficial for caching)?
☐	Add attribute filters: primarily, derivatives
☐	roc and pr curve, if the result is a numerical confidence: i) in Random Forest, one could aggregate tree answers in a continuous manner, and output confidence values, in this context, roc and pr curve can be computed; ii) in Decision Tree there are other approaches
☐	Different array implementations? Array with named dimensions? staticArrays for small domains (matrices/vectors) https://github.com/JuliaArrays/StaticArrays.jl Etc.
☐	Extend to regression
☐	give names to features
☐	Check whether CatWalk.jl can help runtime dispatch look-up time
☐	Migliora stile (https://github.com/invenia/BlueStyle), e non usare import! Usa Base.length, invece!
☐	Functio-symbolic: tree partitions according to logical rules, but occasionally on math relations (e.g., on leaves)


☐	save pre-process pipeline together with the models
☐	problem with argmax when testing (e.g. RF), especially on unbalanced datasets
☐	Support for learning on dataframes
☐	Fix naming style (e.g. variables/features/attributes, etc. Order of struct's members)
☐	Edge detection as a spatial feature https://juliahub.com/docs/ImageEdgeDetection/5h14T/0.1.0/#ImageEdgeDetection.jl-Documentation
☐	Add comments
☐	Add a symbol parameter to computeModalDataset for selecting a trade-off between time and space
☐	NamedArrays for gammas dimensions https://github.com/davidavdav/NamedArrays.jl
☐	Remove useRelationAll and make that choice equivalent to adding relationAll to the OntologicalDataset?
☐	Custom pretty printing, instead of display_... See https://docs.julialang.org/en/v1/manual/types/#man-custom-pretty-printing
☐	Random Forest -> Decision Forest
☐	Improve type stability for better time performance: https://docs.julialang.org/en/v1/devdocs/reflection/#Intermediate-and-compiled-representations  @code_warntype https://www.johnmyleswhite.com/notebook/2013/12/06/writing-type-stable-code-in-julia/ e.g. type-stable slicing with JuliennedArrays ( from https://discourse.julialang.org/t/way-to-slice-an-array-of-unknown-number-of-dimensions/27246 ), EllipsisNotation https://github.com/ChrisRackauckas/EllipsisNotation.jl. Use \@code_warntype as in https://discourse.julialang.org/t/why-selectdim-is-type-instable/25271/2 to double check each function https://nextjournal.com/jbieler/adding-static-type-checking-to-julia-in-100-lines-of-code/
☐	add purity measure to DTLeaf e DTInternal

☐	Check whether \@inbounds improves performances. @propagate_inbounds, @inbounds (and @boundscheck): "In general, bounds-check removal should be the last optimization you make after ensuring everything else works, is well-tested, and follows the usual performance tips." https://stackoverflow.com/questions/38901275/inbounds-propagation-rules-in-julia?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa

☐	computation of softened operators takes too much time (optimize at least <A> in the temporal case?)
☐	Add the generalized solution for union of relations: _UnionOfRelations and its WExtremaModal, WExtrema, WExtremeModal, WExtreme, enumAcc, enumAccRepr. _UnionOfRelations{typeof((RelationId,))} _UnionOfRelations{typeof((RelationId,))} Tuple{_RelationId} (so you can rewrite RCC5 from RCC8 relations and RCC8 from IA, maybe it's cleaner in some cases?)
☐	Add tree parser and convenience methods for tree editing.

☐	Find out whether it's faster to use gammasId or recalculate them.
☐	Test whether zipping is better than writing custom iterators with https://schlichtanders.github.io/Continuables.jl/dev/
☐	Add IA3^7 and IA7^2 relations.

☐	cache-efficient parallelization of gamma calculation? https://github.com/JuliaArrays/TiledIteration.jl
☐	For temporal series, one may want to have timepoints that are scattered along the time axis. See if https://github.com/JuliaArrays/AxisArrays.jl can be of any help here; but note that one may need to know how to handle missing's
☐	Optimize RCC5
☐	Parametrize worldTypes forcing things such as minimum size?

☐	Keep this: throw, error(), @error -> throw_n_log()
☐	Restyle package and add to Julia Registries https://juliahub.com/lp/ https://github.com/JuliaRegistries/Registrator.jl#via-the-github-app
☐	An ontology interpreted over an N-dimensional domain gives rise to a Kripke model/frame, but one can *generalize for a Kripke model/frame in graph form*.
	abstract type AbstractKripkeFrame end
	Generic Kripke frame: worlds & relations
	struct KripkeFrame{T} <: AbstractKripkeFrame{T}
☐	Methodically check the consistency of thresholds lookup table with the actual computed values; not only for the best split
☐	Obtain best_threshold by interpolation of the loss
☐	Further optimize the decision selection for the binary case: in fact, no need to test all of the thresholds: for some test_operators, one can optimize this step and test only those where you know that the loss function went down.

☐	Generalize World as a tuple of parameters ( https://stackoverflow.com/questions/40160120/generic-constructors-for-subtypes-of-an-abstract-type )
☐	Maybe add new hard operator valuesbetween(a,b) (doesn't make the tree more expressive, just maybe faster at capturing patterns)
☐	Try adding ProgressMeter? https://github.com/timholy/ProgressMeter.jl
☐	Generalize greedy step to greedy-n step.
☐	Generalize to beam-search and then beam-search-n?

☐	Add point-based ontology, and test point-based + rectangle algebra?
☐	Try different optimization method: SAM https://arxiv.org/abs/2010.01412


Archive:
	✔	Write optimized ArrayOfOnes struct for W. Someone did this already and it looks ok: https://github.com/emmt/StructuredArrays.jl . Also try: https://github.com/JuliaArrays/FillArrays.jl @done (21-10-08 00:24)
	✔	dataset-loading functions should tell about how they balanced, and how they randomized @done (21-10-07 23:35)
	✔	Parallelize tree construction? Does this require manual copy of dynamic structures used in _split! ? @done (21-10-07 23:25)
	✔	Add IA3 relations @done (21-10-07 23:24)
	✔	Refactor and distinguish between testoperators and functions; and opt/aggregator/polarity @done (21-10-07 23:19)
	✔	Add IA7 relations: Complete by writing enumAccBare, enumAcc, enumAccRepr. @done (21-10-07 23:18)
	✔	multi-frame extension! @done (21-10-07 23:16)
	✔	rename n_instances -> n_samples @done (21-10-07 23:14)
	✔	clean ModalLogic.jl @done (21-05-06 12:55)
	✔	timeit -> symbol @done (21-05-06 10:51)
	✔	Clean initCondition and worldType code @done (21-05-06 10:36)
	✔	check that missing is not in X or Y @done (21-05-06 10:18)
	✔	Play with parameters: @done (21-04-03 20:04)
	✔	Preliminary scan on logic-agnostic parameters @done (21-03-19 15:05)
	✔	Fix purity=-entropy and losses @done (21-03-15 14:55)
	✔	Add name of the labels to a dataset and confusion matrix. @done (21-03-15 12:14)
	✔	Create RCC5 ontology by joining n/tpp(i) into pp(i) (proper part) and dc/ec into dr (disjointness). @done (21-03-15 11:58)
	✔	Add Error catching+repeat with different log level, and keep going @done (21-03-15 11:58)
	✔	Extend to >=alpha and <alpha; these operators are ordered, closed/not closed; maybe others are categorical, in general some are. Fix </>= thing. Fix is_closed/polarity @done (21-03-15 10:55)
	✔	Fix 3 pre-pruning stop conditions: a) purity>purity_threshold; b) min_sample_{leaf,split}>=threshold{absolute,relative}; c) purity gain < min_purity_gain. What if purity is just card(max_class)/card(all classes)? Why (best_purity / nt)? If ... maybe min_purity_increase needs to become min_info_gain @done (21-03-14 23:03)
	✔	Calculate per-class accuracy. @done (21-03-12 17:10)
	✔	Create a dataset with many but tiny worlds. Even a completely random one. @done (21-03-12 14:07)
	✔	> doubles the time but doesn't seem to improve performances. Is this a bug? Try to come up with a dataset that shows if it works. If it's not a bug, maybe we should consider parametrizing on whether this is to be used or not. @done (21-03-12 14:07)
	✔	Rename TestOpLes to TestOpLeq @done (21-03-12 14:05)
	✔	Fix compute-threshold and enumAccRepr so that it works with soft test operator as well! @done (21-03-12 14:03)
	✔	Figure out why we reach "Uninformative split." when using Les only @done (21-03-10 17:21)
	✔	Test 5x5 @done (21-03-08 00:59)
	✔	Now move the extremes computation to the outer algorithm scope, so that it happens BEFORE the whole computation. @done (21-03-08 00:59)
	✔	Improve the computation of the extremes leveraging the structure of IA Frames. @done (21-03-08 00:59)
	✔	Soften > and <= to be >alpha and <=alpha. Make alpha an array to iterate over. Find an efficient way to compute it (note that with a few elements in the world, it can be made efficient with integer operations). @done (21-03-08 00:58)
	✔	enumAcc to only use channel_size and not the whole channel @done (21-03-07 16:44)
	✔	Optimize/fix topological enumerators. There may be some errors as well with interval relations (think of the TPPi thingy, that maybe happens elsewhere) @done (21-02-10 17:41)
	✔	Fix the new optimization thingy. It fails, maybe need to swap min/max. @done (21-02-05 18:06)
	✔	Parametrize on the test operators @done (21-02-02 17:52)
	✔	Test topological manually @done (21-02-02 14:57)
	✔	Fix print_world @done (21-02-02 14:07)
	✔	Check the speedup with/without inbounds (3x3 and 5x5 cases) @done (21-02-02 13:56)
	✔	verify new code. (test all datasets (avoid dataset[2] flattened)) @done (21-01-26 18:06)
	✔	Test with no initCondition @done (21-01-26 18:06)
	✔	Try different starting condition: start at the central pixel. @done (21-01-25 00:10)
	✔	Note that we need to know the speedup for using the extremes array. Hide computation of the extremes. @done (21-01-24 14:32)
	✔	Bring back the extremes, noting that this leads to constant propositional check. @done (21-01-24 14:32)
	✔	Add > @done (21-01-23 01:19)
	✔	Calculate confusion matrix @done (21-01-22 20:09)
	✔	Try the two-dimensional case! @done (21-01-21 01:12)
	✔	Use view instead of slicing @done (21-01-18 20:47)
	✔ perhaps the domain should not be 20x3x3 but 3x3x20, because Julia is column-first @done (21-01-15 14:55)
	✔	TODO const MatricialDomain{T,N} = AbstractArray{T,N} end @done (21-01-15 14:55)
